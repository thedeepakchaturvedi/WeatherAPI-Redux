{"version":3,"sources":["components/Form.jsx","actions/index.js","components/WeatherCard.jsx","components/ToggleTheme.jsx","reducers/locationReducer.js","reducers/locationDataReducer.js","reducers/toggleThemeReducer.js","reducers/index.js","store.js","App.js","index.js"],"names":["Form","location","useSelector","state","theme","dispatch","useDispatch","className","type","placeholder","value","onChange","e","payload","UpdateLocation","target","onClick","a","fetch","res","json","data","console","log","name","error","message","fetchData","UpdateLocationData","WeatherCard","locationData","objToday","Date","today","getDay","getDate","getMonth","src","current","condition","icon","alt","temp_c","text","wind_kph","humidity","precip_mm","ToggleThemeComp","locationReducer","action","locationDataReducer","ToggleThemeReducer","rootReducer","combineReducers","store","createStore","applyMiddleware","thunk","App","ReactDOM","render","document","getElementById"],"mappings":"iNAiCeA,EA9BF,WACT,IAAMC,EAASC,aAAY,SAAAC,GAAK,OAAEA,EAAMF,YAClCG,EAAQF,aAAY,SAAAC,GAAK,OAAEA,EAAMC,SACjCC,EAASC,cACf,OACI,qBAAKC,UAAU,YAAf,SACI,qBAAKA,UAAU,MAAf,SACA,sBAAKA,UAAWH,EAAM,4BAA4B,uBAAlD,UACA,uBACEI,KAAK,OACLC,YAAY,WACZC,MAAOT,EACPU,SAAU,SAACC,GACTP,EChBO,SAACJ,GACtB,MAAO,CACLO,KAAM,kBACNK,QAASZ,GDaYa,CAAeF,EAAEG,OAAOL,WAGrC,wBACEH,UAAWH,EAAM,wBAAwB,uBACzCY,QAAS,WACPX,ECfW,SAACJ,GAC1B,OAAO,SAACI,GAAa,4CAEnB,8BAAAY,EAAA,sEACoBC,MAAM,mFAAD,OAC8DjB,IAFvF,cACQkB,EADR,gBAIqBA,EAAIC,OAJzB,OAIQC,EAJR,OAKE,IACEC,QAAQC,IAAIF,EAAKpB,SAASuB,MAC1BnB,EAAS,CACPG,KAAM,uBACNK,QAASQ,IAEX,MAAOI,GACPH,QAAQC,IAAIF,EAAKI,MAAMC,SACvBrB,EAAS,CACPG,KAAM,uBACNK,QAASQ,IAff,4CAFmB,0DACnBM,IDaqBC,CAAmB3B,KAHhC,4BE+FG4B,EAhHG,WAEd,IAAMC,EAAa5B,aAAY,SAAAC,GAAK,OAAEA,EAAM2B,gBACtC1B,EAAQF,aAAY,SAAAC,GAAK,OAAEA,EAAMC,SAEnC2B,EAAW,IAAIC,KA8BjBC,EA7BQ,CACR,SACA,SACA,UACA,YACA,WACA,SACA,YAEkBF,EAASG,UAoBP,MAlBpBD,GAASF,EAASI,UAAY,IAC1B,IAAMJ,EAASI,UACfJ,EAASI,WAgB2B,IAfjC,CACP,UACA,WACA,QACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,YAEgBJ,EAASK,YAG3B,OACI,qBAAK7B,UAAU,YAAf,SACI,qBAAKA,UAAU,MAAf,SACc,qBAAKA,UAAU,sCAAf,SACd,qBAAKA,UAAWH,EAAM,YAAY,OAAlC,SACG0B,EAAa7B,SACZ,gCACE,sBAAKM,UAAU,gBAAf,UACE,sBAAMA,UAAU,OAAhB,SACE,mBAAGA,UAAU,uBAEf,sBAAMA,UAAU,QAAhB,SAAyBuB,EAAa7B,SAASuB,UAGjD,qBAAKa,IAAKP,EAAaQ,QAAQC,UAAUC,KAAMC,IAAI,KACnD,sBAAKlC,UAAU,SAAf,UACE,sBAAMA,UAAU,QAAhB,SAAyBuB,EAAaQ,QAAQI,SAC9C,sBAAMnC,UAAU,SAAhB,qBAEF,qBAAKA,UAAU,YAAf,SACGuB,EAAaQ,QAAQC,UAAUI,OAGlC,qBAAKpC,UAAU,OAAf,SAAuB0B,IAEvB,qBAAK1B,UAAU,SAEf,qBAAKA,UAAU,YAAf,SACE,sBAAKA,UAAU,MAAf,UACE,qBAAKA,UAAU,MAAf,SACE,sBAAKA,UAAU,OAAf,UACE,qBAAKA,UAAU,OAAf,SACE,qBAAK8B,IAAI,iBAAiBI,IAAI,OAEhC,sBAAKlC,UAAU,QAAf,UACGuB,EAAaQ,QAAQM,SADxB,UAGA,qBAAKrC,UAAU,OAAf,uBAGJ,qBAAKA,UAAU,MAAf,SACE,sBAAKA,UAAU,WAAf,UACE,qBAAKA,UAAU,OAAf,SACE,qBAAK8B,IAAI,iBAAiBI,IAAI,OAEhC,sBAAKlC,UAAU,QAAf,UACGuB,EAAaQ,QAAQO,SADxB,OAGA,qBAAKtC,UAAU,OAAf,2BAGJ,qBAAKA,UAAU,MAAf,SACE,sBAAKA,UAAU,gBAAf,UACE,qBAAKA,UAAU,OAAf,SACE,qBAAK8B,IAAI,gCAAgCI,IAAI,OAE/C,sBAAKlC,UAAU,QAAf,UACGuB,EAAaQ,QAAQQ,UADxB,QAGA,qBAAKvC,UAAU,OAAf,wCAOV,mCAAGuB,EAAaL,MAAMK,EAAaL,MAAMC,QAAU,gCCxFpDqB,EAdO,WAElB,IAAM1C,EAASC,cACTF,EAAMF,aAAY,SAAAC,GAAK,OAAEA,EAAMC,SAIrC,OACI,qBAAKG,UAAU,eAAf,SACI,wBAAQA,UAAWH,EAAM,wBAAwB,uBAAwBY,QAAS,WAAKM,QAAQC,IAAI,MAAMlB,EFqB5G,CACLG,KAAM,iBEtBmIc,QAAQC,IAAInB,IAA7I,SAAuJA,EAAM,QAAQ,Y,eCHlK4C,EATS,WAAyB,IAAxB7C,EAAuB,uDAAf,GAAI8C,EAAW,uCAC9C,OAAQA,EAAOzC,MACb,IAAK,kBACH,OAAOyC,EAAOpC,QAChB,QACE,OAAOV,ICIE+C,EATa,WAAyB,IAAxB/C,EAAuB,uDAAf,GAAI8C,EAAW,uCAClD,OAAQA,EAAOzC,MACb,IAAK,uBACH,OAAOyC,EAAOpC,QAChB,QACE,OAAOV,ICIEgD,EATY,WAA4B,IAA3BhD,EAA0B,wDAAX8C,EAAW,uCACpD,OAAQA,EAAOzC,MACb,IAAK,eACH,OAAQL,EACV,QACE,OAAOA,ICOEiD,EANKC,YAAgB,CAClCpD,SAAU+C,EACVlB,aAAcoB,EACd9C,MAAO+C,ICHMG,EAFDC,YAAYH,EAAaI,YAAgBC,MCkBxCC,MAdf,WACE,IAAMtD,EAAQF,aAAY,SAACC,GAAD,OAAWA,EAAMC,SAE3C,OACE,qBAAKG,UAAWH,EAAQ,WAAa,MAArC,SACE,eAAC,IAAD,CAAUkD,MAAOA,EAAjB,UACE,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,U,MCTRK,IAASC,OACP,cAAC,IAAD,CAAUN,MAAOA,EAAjB,SACE,cAAC,EAAD,MAEFO,SAASC,eAAe,W","file":"static/js/main.116e8b61.chunk.js","sourcesContent":["import { useDispatch,useSelector } from \"react-redux\";\r\nimport { UpdateLocation,UpdateLocationData } from \"../actions\"; \r\n\r\nconst Form = ()=>{\r\n    const location=useSelector(state=>state.location);\r\n    const theme = useSelector(state=>state.theme);\r\n    const dispatch=useDispatch();\r\n    return(\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n            <div className={theme?\"col-12 location-form dark\":\"col-12 location-form\"}>\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Location\"\r\n              value={location}\r\n              onChange={(e) => {\r\n                dispatch(UpdateLocation(e.target.value))\r\n              }}\r\n            ></input>\r\n            <button\r\n              className={theme?\"btn btn-outline-light\":\"btn btn-outline-info\"}\r\n              onClick={() => {\r\n                dispatch(UpdateLocationData(location))\r\n              }}\r\n            >\r\n              Search\r\n            </button>\r\n          </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Form;","const UpdateLocation = (location) => {\r\n  return {\r\n    type: \"UPDATE_LOCATION\",\r\n    payload: location,\r\n  };\r\n};\r\n\r\nconst UpdateLocationData = (location) => {\r\n  return (dispatch) => {\r\n    fetchData();\r\n    async function fetchData() {\r\n      const res = await fetch(\r\n        `https://api.weatherapi.com/v1/current.json?key=dd80f56a143b4d7388275739213107&q=${location}`\r\n      );\r\n      const data = await res.json();\r\n      try {\r\n        console.log(data.location.name);\r\n        dispatch({\r\n          type: \"UPDATE_LOCATION_DATA\",\r\n          payload: data,\r\n        });\r\n      } catch (error) {\r\n        console.log(data.error.message);\r\n        dispatch({\r\n          type: \"UPDATE_LOCATION_DATA\",\r\n          payload: data,\r\n        });\r\n      }\r\n    }\r\n  };\r\n};\r\n\r\nconst ToggleTheme = () => {\r\n  return {\r\n    type: \"TOGGLE_THEME\",\r\n  };\r\n};\r\n\r\nexport { UpdateLocation, UpdateLocationData, ToggleTheme };\r\n","import { useSelector } from \"react-redux\";\r\n\r\nconst WeatherCard=()=>{\r\n\r\n    const locationData=useSelector(state=>state.locationData);\r\n    const theme = useSelector(state=>state.theme);\r\n\r\n    var objToday = new Date(),\r\n    weekday = [\r\n      \"Sunday\",\r\n      \"Monday\",\r\n      \"Tuesday\",\r\n      \"Wednesday\",\r\n      \"Thursday\",\r\n      \"Friday\",\r\n      \"Saturday\",\r\n    ],\r\n    dayOfWeek = weekday[objToday.getDay()],\r\n    dayOfMonth =\r\n      today + (objToday.getDate() < 10)\r\n        ? \"0\" + objToday.getDate()\r\n        : objToday.getDate(),\r\n    months = [\r\n      \"January\",\r\n      \"February\",\r\n      \"March\",\r\n      \"April\",\r\n      \"May\",\r\n      \"June\",\r\n      \"July\",\r\n      \"August\",\r\n      \"September\",\r\n      \"October\",\r\n      \"November\",\r\n      \"December\",\r\n    ],\r\n    curMonth = months[objToday.getMonth()];\r\n  var today = dayOfWeek + \", \" + dayOfMonth + \" \" + curMonth;\r\n\r\n    return(\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                          <div className=\"offset-md-4 col-12 col-md-4 weather\">\r\n            <div className={theme?\"card dark\":\"card\"}>\r\n              {locationData.location ? (\r\n                <div>\r\n                  <div className=\"location-name\">\r\n                    <span className=\"icon\">\r\n                      <i className=\"fa fa-map-marker\"></i>\r\n                    </span>\r\n                    <span className=\"title\">{locationData.location.name}</span>\r\n                  </div>\r\n\r\n                  <img src={locationData.current.condition.icon} alt=\"\" />\r\n                  <div className=\"temp-c\">\r\n                    <span className=\"title\">{locationData.current.temp_c}</span>\r\n                    <span className=\"degree\">Â°</span>\r\n                  </div>\r\n                  <div className=\"condition\">\r\n                    {locationData.current.condition.text}\r\n                  </div>\r\n\r\n                  <div className=\"date\">{today}</div>\r\n\r\n                  <div className=\"line\"></div>\r\n\r\n                  <div className=\"container\">\r\n                    <div className=\"row\">\r\n                      <div className=\"col\">\r\n                        <div className=\"wind\">\r\n                          <div className=\"icon\">\r\n                            <img src=\"wind-solid.svg\" alt=\"\" />\r\n                          </div>\r\n                          <div className=\"value\">\r\n                            {locationData.current.wind_kph}km/h\r\n                          </div>\r\n                          <div className=\"text\">Wind</div>\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"col\">\r\n                        <div className=\"humidity\">\r\n                          <div className=\"icon\">\r\n                            <img src=\"tint-solid.svg\" alt=\"\" />\r\n                          </div>\r\n                          <div className=\"value\">\r\n                            {locationData.current.humidity}%\r\n                          </div>\r\n                          <div className=\"text\">Humidity</div>\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"col\">\r\n                        <div className=\"precipitation\">\r\n                          <div className=\"icon\">\r\n                            <img src=\"cloud-showers-heavy-solid.svg\" alt=\"\" />\r\n                          </div>\r\n                          <div className=\"value\">\r\n                            {locationData.current.precip_mm}mm\r\n                          </div>\r\n                          <div className=\"text\">Precipitation</div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              ) : (\r\n                <>{locationData.error?locationData.error.message : \"Location not found\"}</> //{error}\r\n              )}\r\n            </div>\r\n          </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WeatherCard;","import { useSelector,useDispatch } from \"react-redux\";\r\nimport {ToggleTheme} from \"../actions/index\"\r\n\r\nconst ToggleThemeComp=()=>{\r\n\r\n    const dispatch=useDispatch();\r\n    const theme=useSelector(state=>state.theme);\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"toggle-theme\">\r\n            <button className={theme?\"btn btn-outline-light\":\"btn btn-outline-dark\"} onClick={()=>{console.log(\"ok\");dispatch(ToggleTheme());console.log(theme)}}>{theme?\"Light\":\"Dark\"}</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ToggleThemeComp;","const locationReducer = (state = \"\", action) => {\r\n  switch (action.type) {\r\n    case \"UPDATE_LOCATION\":\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default locationReducer;\r\n","const locationDataReducer = (state = {}, action) => {\r\n  switch (action.type) {\r\n    case \"UPDATE_LOCATION_DATA\":\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default locationDataReducer;\r\n","const ToggleThemeReducer = (state = false, action) => {\r\n  switch (action.type) {\r\n    case \"TOGGLE_THEME\":\r\n      return !state;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default ToggleThemeReducer;\r\n","import locationReducer from \"./locationReducer\";\r\nimport locationDataReducer from \"./locationDataReducer\";\r\nimport ToggleThemeReducer from \"./toggleThemeReducer\";\r\n\r\nimport { combineReducers } from \"redux\";\r\n\r\nconst rootReducer = combineReducers({\r\n  location: locationReducer,\r\n  locationData: locationDataReducer,\r\n  theme: ToggleThemeReducer,\r\n});\r\n\r\nexport default rootReducer;\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport rootReducer from \"./reducers/index\";\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\nexport default store;\r\n","import \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Form from \"./components/Form\";\nimport WeatherCard from \"./components/WeatherCard\";\nimport ToggleThemeComp from \"./components/ToggleTheme\";\nimport store from \"./store\";\nimport { Provider, useSelector } from \"react-redux\";\n\nfunction App() {\n  const theme = useSelector((state) => state.theme);\n\n  return (\n    <div className={theme ? \"App Dark\" : \"App\"}>\n      <Provider store={store}>\n        <ToggleThemeComp />\n        <Form />\n        <WeatherCard />\n      </Provider>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"../node_modules/font-awesome/css/font-awesome.min.css\";\nimport store from \"./store\";\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}